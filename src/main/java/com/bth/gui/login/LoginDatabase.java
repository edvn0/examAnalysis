package com.bth.gui.login;

import com.bth.gui.controller.DatabaseLoginUser;
import com.bth.gui.controller.GUIController;
import com.bth.io.database.mongodb.mongodbconnector.MongoDBConnector;
import com.bth.io.database.mongodb.mongodbcontroller.MongoDBController;
import com.bth.io.database.sql.sqlconnector.SQLConnector;
import com.bth.io.database.sql.sqlcontroller.SQLController;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.mongodb.BasicDBObject;
import com.mongodb.client.MongoCollection;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;

public class LoginDatabase {
  public JPanel primaryPanel;
  public JButton exitButton;
  public JButton confirmButton;
  public JPanel exitConfirmPanel;
  public JTextField databaseName;
  public JTextField UserName;
  public JComboBox DBTypeComboBox;
  public JPasswordField Password;
  public JTextField collectionNameTextField;
  public JTextField mongoDatabaseNameTextField;
  public JPanel databasePanel;
  public JFrame frame;

  private DatabaseLoginUser user;

  private Connection connection;
  private MongoCollection<BasicDBObject> objectsInDb;

  public LoginDatabase() {
    frame = new JFrame("Login to Database");
    frame.setContentPane(this.primaryPanel);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.pack();
    frame.setVisible(false);
    frame.setLocationRelativeTo(null);
    frame.setResizable(false);

    // DEV purpose.
    test(false);

    user = null;
    connection = null;
    objectsInDb = null;

    confirmButton.addActionListener(new ConfirmButtonListener());
  }

  @SuppressWarnings("SameParameterValue")
  private void test(boolean sqlormongo) {
    if (!sqlormongo) {
      this.collectionNameTextField.setText("SchoolStatistics");
      this.databaseName.setText("mongodb+srv://edwin-carlsson:Edwin98@examanalysiscluster-hsaye.mongodb.net/test?retryWrites=true");
      this.mongoDatabaseNameTextField.setText("ExamAnalysisDatabase");
      this.UserName.setText("edwin-carlsson");
      this.Password.setText("Edwin98");
    } else {
      this.collectionNameTextField.setText("none");
      this.databaseName.setText("jdbc:mysql://localhost:8889/stats_exams");
      this.mongoDatabaseNameTextField.setText("none");
      this.UserName.setText("Edwin");
      this.Password.setText("Edwin98");
    }
  }

  public Connection getConnection() {
    return connection;
  }

  public MongoCollection<BasicDBObject> getObjectsInDb() {
    return objectsInDb;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    primaryPanel = new JPanel();
    primaryPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.setMaximumSize(new Dimension(1040, 450));
    primaryPanel.setMinimumSize(new Dimension(1040, 450));
    primaryPanel.setOpaque(false);
    primaryPanel.setPreferredSize(new Dimension(1040, 450));
    exitConfirmPanel = new JPanel();
    exitConfirmPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.add(exitConfirmPanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    exitButton = new JButton();
    exitButton.setText("Exit");
    exitConfirmPanel.add(exitButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    confirmButton = new JButton();
    confirmButton.setText("Confirm");
    exitConfirmPanel.add(confirmButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    databasePanel = new JPanel();
    databasePanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.add(databasePanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    UserName = new JTextField();
    UserName.setText("Username for DB");
    databasePanel.add(UserName, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    DBTypeComboBox = new JComboBox();
    final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
    defaultComboBoxModel1.addElement("MongoDB");
    defaultComboBoxModel1.addElement("MySQL");
    DBTypeComboBox.setModel(defaultComboBoxModel1);
    databasePanel.add(DBTypeComboBox, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    Password = new JPasswordField();
    Password.setText("Password");
    databasePanel.add(Password, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    collectionNameTextField = new JTextField();
    collectionNameTextField.setHorizontalAlignment(0);
    collectionNameTextField.setText("Collection Name");
    databasePanel.add(collectionNameTextField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    mongoDatabaseNameTextField = new JTextField();
    mongoDatabaseNameTextField.setHorizontalAlignment(0);
    mongoDatabaseNameTextField.setText("Mongo Database Name");
    databasePanel.add(mongoDatabaseNameTextField, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    databaseName = new JTextField();
    databaseName.setHorizontalAlignment(0);
    databaseName.setText("jdbc:mysql://<localhost:port>/<db_name>");
    databasePanel.add(databaseName, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return primaryPanel;
  }

  // Local class for getting DBObject
  class ConfirmButtonListener implements ActionListener {
    @Override
    public void actionPerformed(ActionEvent e) {
      String userName = UserName.getText();
      String database = databaseName.getText();
      char[] password = Password.getPassword();
      String collection = collectionNameTextField.getText();
      String choice = (String) DBTypeComboBox.getItemAt(DBTypeComboBox.getSelectedIndex());
      String mongo = mongoDatabaseNameTextField.getText();

      try {
        user = new DatabaseLoginUser(mongo, choice, database, userName, password, collection);
        if (choice.equals("MySQL")) {
          SQLController.setDatabaseLoginUser(user);
          connection = SQLConnector.connectToDatabase();
          GUIController.dbChoice = true;
        } else {
          System.out.println(user.toString());
          MongoDBController.setDatabaseLoginUser(user);
          objectsInDb = MongoDBConnector.connectToMongoDB(user);
          GUIController.dbChoice = false;
        }
      } catch (Exception e1) {
        e1.printStackTrace();
      }
      frame.dispose();
    }
  }
}

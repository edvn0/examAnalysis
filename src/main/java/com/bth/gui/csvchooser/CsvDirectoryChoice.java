package com.bth.gui.csvchooser;

import com.bth.io.ExamOutput;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.io.File;

public class CsvDirectoryChoice {
  public JFileChooser fileChooser1;
  public JButton exitButton;
  public JButton confirmButton;
  public JPanel primaryPanel;
  public JPanel labelPanel;
  public JPanel filePanel;
  public JPanel buttonPanel;
  public JLabel dirLabel;
  public JFrame frame;

  private File directory;
  private File url;

  public CsvDirectoryChoice() {
    directory = null;
    url = null;

    frame = new JFrame("In which directory should CSV be outputted?");
    frame.setContentPane(this.primaryPanel);
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    frame.pack();
    frame.setVisible(false);
    frame.setLocationRelativeTo(null);
    frame.setResizable(false);

    fileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

    confirmButton.addActionListener(e -> {
      directory = fileChooser1.getSelectedFile();
      ExamOutput.setDirectory(directory.getAbsolutePath());
      frame.dispose();
    });

    exitButton.addActionListener(e -> {
      frame.dispose();
    });
  }

  public File getDirectory() {
    return directory;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    primaryPanel = new JPanel();
    primaryPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.setInheritsPopupMenu(false);
    primaryPanel.setMaximumSize(new Dimension(600, 600));
    primaryPanel.setMinimumSize(new Dimension(600, 600));
    primaryPanel.setPreferredSize(new Dimension(600, 600));
    labelPanel = new JPanel();
    labelPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.add(labelPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    dirLabel = new JLabel();
    Font dirLabelFont = this.$$$getFont$$$("Monaco", Font.BOLD, 26, dirLabel.getFont());
    if (dirLabelFont != null) dirLabel.setFont(dirLabelFont);
    dirLabel.setText("Choose local directory for CSV");
    labelPanel.add(dirLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    buttonPanel = new JPanel();
    buttonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.add(buttonPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    exitButton = new JButton();
    exitButton.setText("Exit");
    buttonPanel.add(exitButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    confirmButton = new JButton();
    confirmButton.setText("Confirm");
    buttonPanel.add(confirmButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    filePanel = new JPanel();
    filePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.add(filePanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    fileChooser1 = new JFileChooser();
    fileChooser1.setAcceptAllFileFilterUsed(true);
    filePanel.add(fileChooser1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return primaryPanel;
  }

}

package com.bth.gui;

import com.bth.analysis.ExamAnalysis;
import com.bth.analysis.stats.StatsSchool;
import com.bth.analysis.stats.StatsTeam;
import com.bth.analysis.stats.helperobjects.RoundOffStatsQuestion;
import com.bth.exams.ExamSchool;
import com.bth.gui.controller.GuiController;
import com.bth.gui.csvchooser.CsvDirectoryChoice;
import com.bth.gui.examdirectorygui.ChooseInputFileFrame;
import com.bth.gui.login.LoginDatabase;
import com.bth.io.output.ExamOutput;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

public class MainGui {

  private static File file;
  private JPanel panel1;
  private JLabel DATABASELabel;
  private JLabel CSVLabel;
  private JButton questionsToDatabaseButton;
  private JButton teamsToDatabaseButton;
  private JButton schoolsToDatabaseButton;
  private JButton exitButton;
  private JButton questionsToCSVButton;
  private JButton teamsToCSVButton;
  private JButton schoolsToCSVButton;
  private JButton oneToFourteenCSVButton;
  private JButton CSVInputFileButton;
  private JButton loginDatabaseButton;
  private JButton insertEverythingButton;
  private JPanel databasePanel;
  private JPanel dbPanel;
  private JPanel csvPanel;

  private GuiController controller;
  private ExamAnalysis examAnalysis;

  private List<RoundOffStatsQuestion> questionsStats;
  private List<StatsSchool> statsSchools;
  private List<StatsTeam> statsTeams;
  private ExamSchool[] exams;

  private JFrame frame;

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  public MainGui() throws FileNotFoundException {
    controller = new GuiController();
    setup();
  }

  private void initArrays() {
    this.questionsStats = examAnalysis.getQuestionsStats();
    this.statsSchools = examAnalysis.getStatsSchools();
    this.statsTeams = examAnalysis.getStatsTeams();
    this.exams = examAnalysis.getExamSchools();
  }

  private ArrayList<JComponent> addAllToList() {
    ArrayList<JComponent> temp = new ArrayList<>();
    temp.add(getQuestionsToCSVButton());
    temp.add(getTeamsToCSVButton());
    temp.add(getSchoolsToCSVButton());
    temp.add(getOneToFourteenCSVButton());
    temp.add(getSchoolsToDatabaseButton());
    temp.add(getTeamsToDatabaseButton());
    temp.add(getQuestionsToDatabaseButton());
    temp.add(insertEverythingButton);
    return temp;
  }

  private void insertActionListener(ArrayList<JComponent> components) {
    for (JComponent component : components) {
      JButton button = (JButton) component;
      button.addActionListener(new OutputIntegrationListener());
    }
  }

  public JButton getLoginDatabaseButton() {
    return loginDatabaseButton;
  }

  public JPanel getPanel1() {
    return panel1;
  }

  public JLabel getDATABASELabel() {
    return DATABASELabel;
  }

  public JLabel getCSVLabel() {
    return CSVLabel;
  }

  public JButton getQuestionsToDatabaseButton() {
    return questionsToDatabaseButton;
  }

  public JButton getTeamsToDatabaseButton() {
    return teamsToDatabaseButton;
  }

  public JButton getSchoolsToDatabaseButton() {
    return schoolsToDatabaseButton;
  }

  public JButton getExitButton() {
    return exitButton;
  }

  public JButton getQuestionsToCSVButton() {
    return questionsToCSVButton;
  }

  public JButton getTeamsToCSVButton() {
    return teamsToCSVButton;
  }

  public JButton getSchoolsToCSVButton() {
    return schoolsToCSVButton;
  }

  public JButton getOneToFourteenCSVButton() {
    return oneToFourteenCSVButton;
  }

  public JButton getCSVInputFileButton() {
    return CSVInputFileButton;
  }

  private Component getFrame() {
    return this.frame;
  }

  public static void setFileFromChooseDirectory(File file) {
    MainGui.file = file;
  }

  private void setup() throws FileNotFoundException {
    // Init gui
    frame = new JFrame("MainGui");
    frame.setLocationByPlatform(true);
    frame.setContentPane(this.getPanel1());
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.pack();
    frame.setResizable(false);
    frame.setVisible(true);
    controller.append(this);
    controller.getMainGui().getFrame().setVisible(false);
    // End init gui

    // Add all relevant components to a List to manage more easily.
    ArrayList<JComponent> list = addAllToList();
    // Disable prior to initialisation.
    controller.setEnabledForAll(list, false);
    controller.append(new LoginDatabase());
    controller.append(new ChooseInputFileFrame());
    controller.append(new CsvDirectoryChoice());

    // Invisible until resource directory has been chosen.
    controller.getCsvDirectoryChoice().fileChooser1.setVisible(false);

    // Init all the JButton listeners
    this.insertActionListener(list);

    getLoginDatabaseButton().addActionListener(e1 ->
        controller.getLoginDatabase().getFrame().setVisible(true));

    controller.getLoginDatabase().getConfirmButton().addActionListener(
        new DatabaseButtonListener());

    getCSVInputFileButton()
        .addActionListener(e -> controller.getCsvDirectoryChoice().init());

    getExitButton().addActionListener(e -> System.exit(0));

    if (file != null) {
      examAnalysis = new ExamAnalysis(file.getAbsolutePath());
    } else {
      String dir = "/Users/edwincarlsson/Documents/"
          + "Programmering/exam_Analysis/src/main/"
          + "resources/data/csvfiles/DeltÃ¤vlingstentamen_2019_03_21.csv";
      examAnalysis = new ExamAnalysis(dir);
    }
    examAnalysis.start();
    this.initArrays();
    this.frame.setVisible(true);
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
    panel1.setBackground(new Color(-2039585));
    panel1.setForeground(new Color(-4973171));
    panel1.setMaximumSize(new Dimension(800, 630));
    panel1.setMinimumSize(new Dimension(800, 630));
    panel1.setPreferredSize(new Dimension(800, 630));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 2, new Insets(8, 8, 8, 8), -1, -1, true, false));
    panel2.setBackground(new Color(-2039585));
    panel2.setForeground(new Color(-4973171));
    panel1.add(panel2,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    panel2.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createLineBorder(new Color(-4973171)), null));
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), 0, 0));
    panel3.setAutoscrolls(false);
    panel3.setBackground(new Color(-2039585));
    panel3.setInheritsPopupMenu(false);
    panel2.add(panel3,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    panel3
        .setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null));
    loginDatabaseButton = new JButton();
    loginDatabaseButton.setBackground(new Color(-2039585));
    Font loginDatabaseButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, loginDatabaseButton.getFont());
    if (loginDatabaseButtonFont != null) {
      loginDatabaseButton.setFont(loginDatabaseButtonFont);
    }
    loginDatabaseButton.setForeground(new Color(-4973171));
    loginDatabaseButton.setHorizontalAlignment(0);
    loginDatabaseButton.setHorizontalTextPosition(0);
    loginDatabaseButton.setText("Login to Database");
    panel3.add(loginDatabaseButton,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            new Dimension(200, 30), new Dimension(287, 30), new Dimension(200, 30), 0, false));
    DATABASELabel = new JLabel();
    DATABASELabel.setAlignmentX(0.5f);
    DATABASELabel.setBackground(new Color(-2039585));
    DATABASELabel.setDoubleBuffered(true);
    Font DATABASELabelFont = this.$$$getFont$$$("TheSans", Font.BOLD, 24, DATABASELabel.getFont());
    if (DATABASELabelFont != null) {
      DATABASELabel.setFont(DATABASELabelFont);
    }
    DATABASELabel.setForeground(new Color(-4973171));
    DATABASELabel.setHorizontalAlignment(0);
    DATABASELabel.setHorizontalTextPosition(0);
    DATABASELabel.setOpaque(false);
    DATABASELabel.setText("DATABASE");
    DATABASELabel.setVerticalAlignment(0);
    DATABASELabel.setVerticalTextPosition(0);
    panel3.add(DATABASELabel,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    final JPanel panel4 = new JPanel();
    panel4.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), 0, 0));
    panel4.setAutoscrolls(false);
    panel4.setBackground(new Color(-2039585));
    panel4.setInheritsPopupMenu(false);
    panel2.add(panel4,
        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    panel4
        .setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null));
    CSVLabel = new JLabel();
    CSVLabel.setAlignmentX(0.5f);
    CSVLabel.setBackground(new Color(-2039585));
    CSVLabel.setDoubleBuffered(true);
    Font CSVLabelFont = this.$$$getFont$$$("TheSans", Font.BOLD, 24, CSVLabel.getFont());
    if (CSVLabelFont != null) {
      CSVLabel.setFont(CSVLabelFont);
    }
    CSVLabel.setForeground(new Color(-4973171));
    CSVLabel.setHorizontalAlignment(0);
    CSVLabel.setHorizontalTextPosition(0);
    CSVLabel.setOpaque(false);
    CSVLabel.setText("CSV");
    CSVLabel.setVerticalAlignment(0);
    CSVLabel.setVerticalTextPosition(0);
    panel4.add(CSVLabel,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    CSVInputFileButton = new JButton();
    CSVInputFileButton.setBackground(new Color(-2039585));
    Font CSVInputFileButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, CSVInputFileButton.getFont());
    if (CSVInputFileButtonFont != null) {
      CSVInputFileButton.setFont(CSVInputFileButtonFont);
    }
    CSVInputFileButton.setForeground(new Color(-4973171));
    CSVInputFileButton.setHorizontalAlignment(0);
    CSVInputFileButton.setHorizontalTextPosition(0);
    CSVInputFileButton.setText("Choose CSV File");
    panel4.add(CSVInputFileButton,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            new Dimension(200, 30), new Dimension(200, 30), new Dimension(200, 30), 0, false));
    exitButton = new JButton();
    exitButton.setBackground(new Color(-2039585));
    Font exitButtonFont = this.$$$getFont$$$("TheSans", -1, 14, exitButton.getFont());
    if (exitButtonFont != null) {
      exitButton.setFont(exitButtonFont);
    }
    exitButton.setForeground(new Color(-4973171));
    exitButton.setText("Exit");
    panel1.add(exitButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JPanel panel5 = new JPanel();
    panel5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    panel5.setBackground(new Color(-2039585));
    panel1.add(panel5,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    databasePanel = new JPanel();
    databasePanel.setLayout(new GridLayoutManager(1, 2, new Insets(10, 10, 10, 10), -1, -1));
    databasePanel.setBackground(new Color(-2039585));
    databasePanel.setOpaque(true);
    panel5.add(databasePanel,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    databasePanel.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createLineBorder(new Color(-4973171)), null,
            TitledBorder.CENTER, TitledBorder.ABOVE_TOP));
    dbPanel = new JPanel();
    dbPanel.setLayout(new GridLayoutManager(4, 1, new Insets(8, 8, 8, 8), -1, -1));
    dbPanel.setBackground(new Color(-2039585));
    databasePanel.add(dbPanel,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    dbPanel.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createLineBorder(new Color(-4973171)), null));
    teamsToDatabaseButton = new JButton();
    teamsToDatabaseButton.setBackground(new Color(-2039585));
    teamsToDatabaseButton.setBorderPainted(true);
    Font teamsToDatabaseButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, teamsToDatabaseButton.getFont());
    if (teamsToDatabaseButtonFont != null) {
      teamsToDatabaseButton.setFont(teamsToDatabaseButtonFont);
    }
    teamsToDatabaseButton.setForeground(new Color(-4973171));
    teamsToDatabaseButton.setHorizontalAlignment(0);
    teamsToDatabaseButton.setHorizontalTextPosition(0);
    teamsToDatabaseButton.setText("Teams To Database");
    teamsToDatabaseButton.setToolTipText("Inserts the teams into the database/s.");
    teamsToDatabaseButton.setVerticalAlignment(0);
    teamsToDatabaseButton.setVerticalTextPosition(0);
    dbPanel.add(teamsToDatabaseButton,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    questionsToDatabaseButton = new JButton();
    questionsToDatabaseButton.setBackground(new Color(-2039585));
    questionsToDatabaseButton.setBorderPainted(true);
    Font questionsToDatabaseButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, questionsToDatabaseButton.getFont());
    if (questionsToDatabaseButtonFont != null) {
      questionsToDatabaseButton.setFont(questionsToDatabaseButtonFont);
    }
    questionsToDatabaseButton.setForeground(new Color(-4973171));
    questionsToDatabaseButton.setHorizontalAlignment(0);
    questionsToDatabaseButton.setHorizontalTextPosition(0);
    questionsToDatabaseButton.setText("Questions To Database");
    questionsToDatabaseButton.setToolTipText("Inserts the questions into the database/s.");
    questionsToDatabaseButton.setVerticalAlignment(0);
    questionsToDatabaseButton.setVerticalTextPosition(0);
    dbPanel.add(questionsToDatabaseButton,
        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    insertEverythingButton = new JButton();
    insertEverythingButton.setBackground(new Color(-2039585));
    insertEverythingButton.setBorderPainted(true);
    Font insertEverythingButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, insertEverythingButton.getFont());
    if (insertEverythingButtonFont != null) {
      insertEverythingButton.setFont(insertEverythingButtonFont);
    }
    insertEverythingButton.setForeground(new Color(-4973171));
    insertEverythingButton.setHorizontalAlignment(0);
    insertEverythingButton.setHorizontalTextPosition(0);
    insertEverythingButton.setText("Insert everything");
    insertEverythingButton.setToolTipText(
        "Inserts the information about the schools, teams and questions into both databases at the same time.");
    insertEverythingButton.setVerticalAlignment(0);
    insertEverythingButton.setVerticalTextPosition(0);
    dbPanel.add(insertEverythingButton,
        new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    schoolsToDatabaseButton = new JButton();
    schoolsToDatabaseButton.setBackground(new Color(-2039585));
    schoolsToDatabaseButton.setBorderPainted(true);
    Font schoolsToDatabaseButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, schoolsToDatabaseButton.getFont());
    if (schoolsToDatabaseButtonFont != null) {
      schoolsToDatabaseButton.setFont(schoolsToDatabaseButtonFont);
    }
    schoolsToDatabaseButton.setForeground(new Color(-4973171));
    schoolsToDatabaseButton.setHorizontalAlignment(0);
    schoolsToDatabaseButton.setHorizontalTextPosition(0);
    schoolsToDatabaseButton.setText("Schools To Database");
    schoolsToDatabaseButton.setToolTipText("Inserts the schools into the database/s.");
    schoolsToDatabaseButton.setVerticalAlignment(0);
    schoolsToDatabaseButton.setVerticalTextPosition(0);
    dbPanel.add(schoolsToDatabaseButton,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    csvPanel = new JPanel();
    csvPanel.setLayout(new GridLayoutManager(4, 1, new Insets(8, 8, 8, 8), -1, -1));
    csvPanel.setBackground(new Color(-2039585));
    databasePanel.add(csvPanel,
        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    csvPanel.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createLineBorder(new Color(-4973171)), null));
    oneToFourteenCSVButton = new JButton();
    oneToFourteenCSVButton.setBackground(new Color(-2039585));
    oneToFourteenCSVButton.setBorderPainted(true);
    oneToFourteenCSVButton.setEnabled(true);
    Font oneToFourteenCSVButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, oneToFourteenCSVButton.getFont());
    if (oneToFourteenCSVButtonFont != null) {
      oneToFourteenCSVButton.setFont(oneToFourteenCSVButtonFont);
    }
    oneToFourteenCSVButton.setForeground(new Color(-4973171));
    oneToFourteenCSVButton.setHorizontalAlignment(0);
    oneToFourteenCSVButton.setHorizontalTextPosition(0);
    oneToFourteenCSVButton.setText("Q1-Q14 to CSV");
    oneToFourteenCSVButton.setVerticalAlignment(0);
    oneToFourteenCSVButton.setVerticalTextPosition(0);
    csvPanel.add(oneToFourteenCSVButton,
        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    questionsToCSVButton = new JButton();
    questionsToCSVButton.setBackground(new Color(-2039585));
    questionsToCSVButton.setBorderPainted(true);
    Font questionsToCSVButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, questionsToCSVButton.getFont());
    if (questionsToCSVButtonFont != null) {
      questionsToCSVButton.setFont(questionsToCSVButtonFont);
    }
    questionsToCSVButton.setForeground(new Color(-4973171));
    questionsToCSVButton.setHorizontalAlignment(0);
    questionsToCSVButton.setHorizontalTextPosition(0);
    questionsToCSVButton.setText("Questions To CSV");
    questionsToCSVButton.setVerticalAlignment(0);
    questionsToCSVButton.setVerticalTextPosition(0);
    csvPanel.add(questionsToCSVButton,
        new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    schoolsToCSVButton = new JButton();
    schoolsToCSVButton.setBackground(new Color(-2039585));
    schoolsToCSVButton.setBorderPainted(true);
    Font schoolsToCSVButtonFont = this
        .$$$getFont$$$("TheSans", -1, 14, schoolsToCSVButton.getFont());
    if (schoolsToCSVButtonFont != null) {
      schoolsToCSVButton.setFont(schoolsToCSVButtonFont);
    }
    schoolsToCSVButton.setForeground(new Color(-4973171));
    schoolsToCSVButton.setHorizontalAlignment(0);
    schoolsToCSVButton.setHorizontalTextPosition(0);
    schoolsToCSVButton.setText("Schools To CSV");
    schoolsToCSVButton.setVerticalAlignment(0);
    schoolsToCSVButton.setVerticalTextPosition(0);
    csvPanel.add(schoolsToCSVButton,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
    teamsToCSVButton = new JButton();
    teamsToCSVButton.setBackground(new Color(-2039585));
    teamsToCSVButton.setBorderPainted(true);
    Font teamsToCSVButtonFont = this.$$$getFont$$$("TheSans", -1, 14, teamsToCSVButton.getFont());
    if (teamsToCSVButtonFont != null) {
      teamsToCSVButton.setFont(teamsToCSVButtonFont);
    }
    teamsToCSVButton.setForeground(new Color(-4973171));
    teamsToCSVButton.setHorizontalAlignment(0);
    teamsToCSVButton.setHorizontalTextPosition(0);
    teamsToCSVButton.setText("Teams To CSV");
    teamsToCSVButton.setVerticalAlignment(0);
    teamsToCSVButton.setVerticalTextPosition(0);
    csvPanel.add(teamsToCSVButton,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30),
            new Dimension(200, 30), 0, false));
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) {
      return null;
    }
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    return new Font(resultName, style >= 0 ? style : currentFont.getStyle(),
        size >= 0 ? size : currentFont.getSize());
  }

  // Inner class for Database integration
  class OutputIntegrationListener implements ActionListener {

    @Override
    public void actionPerformed(ActionEvent e) {

      // These booleans represent the state of the database login:s.
      boolean[] loggedIn = new boolean[]{
          controller.getMDBConnection() != null && controller.getMySqlConnection() != null,
          controller.getMDBConnection() != null && controller.getMySqlConnection() == null,
          controller.getMDBConnection() == null && controller.getMySqlConnection() != null
      };

      String directory = ExamOutput.getDirectory();

      switch (e.getActionCommand().toLowerCase().trim()) {
        case ("teams to csv"):
          System.out.println("*-------------------------------------------------------*");
          System.out.println("Printing StatsTeam information to " + directory + " ...");
          System.out.println("*-------------------------------------------------------*");
          ExamOutput.printToCSV_Teams(statsTeams);
          System.out.println("Printed StatsTeam information!");
          break;
        case ("schools to csv"):
          System.out.println("*-------------------------------------------------------*");
          System.out.println("Printing StatsSchool information to " + directory + " ...");
          System.out.println("*-------------------------------------------------------*");
          ExamOutput.printToCSV_Schools(statsSchools);
          System.out.println("Printed StatsSchool information!");
          break;
        case ("questions to csv"):
          System.out.println("*-------------------------------------------------------*");
          System.out.println("Printing StatsQuestion information to " + directory + " ...");
          System.out.println("*-------------------------------------------------------*");
          ExamOutput.printToCSV_Questions(questionsStats);
          System.out.println("Printed StatsQuestion information!");
          break;
        case ("q1-q14 to csv"):
          System.out.println("*-------------------------------------------------------*");
          System.out.println("Printing question 1-14 into " + directory + " ...");
          System.out.println("*-------------------------------------------------------*");
          ExamOutput.printQuestionsToCSV(exams, examAnalysis.getExamTeams());
          System.out.println("Printed q1-q14 information!");
          break;
        case ("questions to database"):
          if (loggedIn[2]) // SQL insertion StatsQuestions
          {
            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into database...");
            System.out.println("*-------------------------------------------------------*");

            try {
              controller.insertIntoMySQLDatabase(null,
                  null, questionsStats,
                  controller.getLoginDatabase().getMySqlConnection().getUser().getQuestionTable());
            } catch (SQLException e1) {
              e1.printStackTrace();
            }
            System.out.println("Inserted!");

          } else if (loggedIn[1])// MongoDB insertion StatsQuestions
          {
            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into database...");
            System.out.println("*-------------------------------------------------------*");

            controller.insertIntoMongoDatabase(null, null, questionsStats,
                null,
                null,
                controller.getLoginDatabase().getMongoDBConnection().getUser().getQuestionColl());

            System.out.println("Inserted!");

          } else if (loggedIn[0]) {

            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into both databases...");
            System.out.println("*-------------------------------------------------------*");

            controller.insertIntoMongoDatabase(null, null, questionsStats,
                null,
                null,
                controller.getLoginDatabase().getMongoDBConnection().getUser().getQuestionColl());

            try {
              controller.insertIntoMySQLDatabase(null,
                  null, questionsStats,
                  controller.getLoginDatabase().getMySqlConnection().getUser().getQuestionTable());
            } catch (SQLException ex) {
              ex.printStackTrace();
            }
            System.out.println("Inserted into both databases.");
          }
          break;
        case ("schools to database"):
          if (loggedIn[2]) // SQL insertion StatsSchool
          {
            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into database...");
            System.out.println("*-------------------------------------------------------*");

            try {
              controller.insertIntoMySQLDatabase(null,
                  statsSchools, null,
                  controller.getLoginDatabase().getMySqlConnection().getUser().getSchoolTable());
            } catch (SQLException e1) {
              e1.printStackTrace();
            }

            System.out.println("Inserted!");

          } else if (loggedIn[1])// MongoDB insertion StatsSchool
          {
            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into database...");
            System.out.println("*-------------------------------------------------------*");

            controller.insertIntoMongoDatabase(statsSchools, null, null,
                controller.getLoginDatabase().getMongoDBConnection().getUser().getSchoolColl(),
                null,
                null);

            System.out.println("Inserted!");
          } else if (loggedIn[0]) {
            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into both databases...");
            System.out.println("*-------------------------------------------------------*");

            controller.insertIntoMongoDatabase(statsSchools, null, null,
                controller.getLoginDatabase().getMongoDBConnection().getUser()
                    .getSchoolColl(),
                null,
                null);

            try {
              controller.insertIntoMySQLDatabase(null,
                  statsSchools, null,
                  controller.getLoginDatabase().getMySqlConnection().getUser().getSchoolTable());
            } catch (SQLException e1) {
              e1.printStackTrace();
            }
            System.out.println("Inserted into both databases.");
          }
          break;
        case ("teams to database"):
          if (loggedIn[2]) // SQL insertion StatsTeams
          {
            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into database...");
            System.out.println("*-------------------------------------------------------*");

            try {
              controller.insertIntoMySQLDatabase(statsTeams,
                  null, null,
                  controller.getLoginDatabase().getMySqlConnection().getUser().getTeamTable());
            } catch (SQLException e1) {
              e1.printStackTrace();
            }

            System.out.println("Inserted!");
          } else if (loggedIn[1])// MongoDB insertion StatsTeams
          {
            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into database...");
            System.out.println("*-------------------------------------------------------*");

            controller.insertIntoMongoDatabase(null, statsTeams, null,
                null,
                controller.getLoginDatabase().getMongoDBConnection().getUser().getTeamColl(),
                null);

            System.out.println("Inserted!");
          } else if (loggedIn[0]) {
            System.out.println("*-------------------------------------------------------*");
            System.out.println("Inserting " + e.getActionCommand() + " into both databases...");
            System.out.println("*-------------------------------------------------------*");

            controller.insertIntoMongoDatabase(null, statsTeams, null,
                null,
                controller.getLoginDatabase().getMongoDBConnection().getUser().getTeamColl(),
                null);

            try {
              controller.insertIntoMySQLDatabase(statsTeams,
                  null, null,
                  controller.getLoginDatabase().getMySqlConnection().getUser().getTeamTable());
            } catch (SQLException e1) {
              e1.printStackTrace();
            }

            System.out.println("Inserted into both databases.");
          }
          break;
        case "insert everything":

          if (!loggedIn[0]) {
            System.out.println("You are not connected to both databases, "
                + "this button needs you to connect to both databases.");
            break;
          }

          long now = System.currentTimeMillis();
          System.out.println("*-------------------------------------------------------*");
          System.out.println(
              "Inserting school, team and questions info into both sql and mongodb databases...");
          System.out.println("*-------------------------------------------------------*");
          try {
            System.out.println("Inserting questions into SQL...");
            controller.insertIntoMySQLDatabase(
                null,
                null,
                questionsStats,
                controller.getLoginDatabase().getMySqlConnection().getUser().getQuestionTable());
            System.out.println("Inserted questions...");
            System.out.println("Inserting questions into Mongo...");

            controller.insertIntoMongoDatabase(
                null,
                null,
                questionsStats,
                null,
                null,
                controller.getLoginDatabase().getMongoDBConnection().getUser()
                    .getQuestionColl());
            System.out.println("Inserted questions...");
            System.out.println("Inserting school stats into SQL...");

            controller.insertIntoMySQLDatabase(
                null,
                statsSchools,
                null,
                controller.getLoginDatabase().getMySqlConnection().getUser().getSchoolTable());
            System.out.println("Inserted school stats...");
            System.out.println("Inserting school stats into Mongo...");

            controller.insertIntoMongoDatabase(
                statsSchools,
                null,
                null,
                controller.getLoginDatabase().getMongoDBConnection().getUser()
                    .getSchoolColl(),
                null,
                null);
            System.out.println("Inserted school stats...");
            System.out.println("Inserting stats teams into SQL...");

            controller.insertIntoMySQLDatabase(
                statsTeams,
                null,
                null,
                controller.getLoginDatabase().getMySqlConnection().getUser().getTeamTable());
            System.out.println("Inserted stats teams...");
            System.out.println("Inserting stats teams into Mongo...");

            controller.insertIntoMongoDatabase(
                null,
                statsTeams,
                null,
                null,
                controller.getLoginDatabase().getMongoDBConnection().getUser()
                    .getTeamColl(),
                null);
            System.out.println("Inserted stats teams...");
            long now2 = System.currentTimeMillis();
            System.out.println("Total execution time was: " + (now2 - now) + "ms.");
          } catch (SQLException e2) {
            e2.printStackTrace();
          }
          System.out.println("Finished successfully!");
          break;
        default:
          break;
      }
    }
  }

  // Inner class for Database login
  class DatabaseButtonListener implements ActionListener {

    @Override
    public void actionPerformed(ActionEvent e) {
      controller.setEnabledForAll(addAllToList(), true);
      getCSVInputFileButton().setEnabled(true);
    }

  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return panel1;
  }
}

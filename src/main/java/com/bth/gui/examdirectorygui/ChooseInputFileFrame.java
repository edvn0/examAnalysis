package com.bth.gui.examdirectorygui;

import com.bth.gui.MainGui;
import com.bth.io.input.PropertiesReader;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.io.File;
import java.io.IOException;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

public class ChooseInputFileFrame {

  public JPanel mainPanel;
  public JLabel chooseLabel;
  public JFileChooser fileChooser1;

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  public ChooseInputFileFrame() {
    // DEV!
    try {
      fileChooser1.setCurrentDirectory(new File(new PropertiesReader(
          "/Users/edwincarlsson/Documents/Programmering/exam_Analysis/.properties")
          .getProperty("file.chooser.directory")));
    } catch (IOException e) {
      e.printStackTrace();
    }
    // END DEV

    fileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);

    fileChooser1.setDialogTitle("Please choose csv file for input");
    int retVal = fileChooser1.showSaveDialog(null);
    if (retVal == JFileChooser.APPROVE_OPTION) {
      if (!fileChooser1.getSelectedFile().isDirectory()) {
        MainGui.setFileFromChooseDirectory(fileChooser1.getSelectedFile());
      } else {
        JOptionPane.showMessageDialog(null, "Incorrect input.");
      }
    }

  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(15, 15, 15, 15), -1, -1));
    mainPanel.setBackground(new Color(-2039585));
    mainPanel.setForeground(new Color(-4973171));
    mainPanel.setMaximumSize(new Dimension(730, 490));
    mainPanel.setMinimumSize(new Dimension(730, 490));
    mainPanel.setOpaque(true);
    mainPanel.setPreferredSize(new Dimension(730, 490));
    mainPanel.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createLineBorder(new Color(-4973171)), null,
            TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION,
            this.$$$getFont$$$(null, -1, -1, mainPanel.getFont())));
    fileChooser1 = new JFileChooser();
    fileChooser1.setDoubleBuffered(true);
    mainPanel.add(fileChooser1,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    chooseLabel = new JLabel();
    chooseLabel.setBackground(new Color(-2039585));
    Font chooseLabelFont = this.$$$getFont$$$("Monaco", Font.BOLD, 22, chooseLabel.getFont());
    if (chooseLabelFont != null) {
      chooseLabel.setFont(chooseLabelFont);
    }
    chooseLabel.setForeground(new Color(-4973171));
    chooseLabel.setText("Choose the file from which the analysis will be done");
    mainPanel.add(chooseLabel,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) {
      return null;
    }
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    return new Font(resultName, style >= 0 ? style : currentFont.getStyle(),
        size >= 0 ? size : currentFont.getSize());
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }
}

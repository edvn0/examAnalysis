package com.bth.gui.controller;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;

public class LoginDatabase
{
  public JPanel primaryPanel;
  public JButton exitButton;
  public JButton confirmButton;
  public JPanel exitConfirmPanel;
  public JTextField databaseName;
  public JTextField UserName;
  public JComboBox DBTypeComboBox;
  public JPasswordField Password;
  public JTextField collectionNameTextField;

  private DatabaseLoginUser user;

  public LoginDatabase()
  {
    JFrame frame = new JFrame("Login to Database");
    frame.setContentPane(this.primaryPanel);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.pack();
    frame.setVisible(true);
    frame.setLocationRelativeTo(null);

    user = null;

    confirmButton.addActionListener(new ConfirmButton());
  }

  // Local class for getting DBObject
  class ConfirmButton implements ActionListener
  {
    @Override
    public void actionPerformed(ActionEvent e)
    {
      String userName = UserName.getText();
      String database = databaseName.getText();
      char[] password = Password.getPassword();
      String choice = (String) DBTypeComboBox.getItemAt(DBTypeComboBox.getSelectedIndex());
      String collection = collectionNameTextField.getText();

      try
      {
        user = new DatabaseLoginUser(choice, database, userName, password, collection);
      } catch (SQLException e1)
      {
        e1.printStackTrace();
      }
    }
  }

  public DatabaseLoginUser getUser()
  {
    return user;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$()
  {
    primaryPanel = new JPanel();
    primaryPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
    exitConfirmPanel = new JPanel();
    exitConfirmPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.add(exitConfirmPanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    exitButton = new JButton();
    exitButton.setText("Exit");
    exitConfirmPanel.add(exitButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    confirmButton = new JButton();
    confirmButton.setText("Confirm");
    exitConfirmPanel.add(confirmButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
    primaryPanel.add(panel1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    databaseName = new JTextField();
    databaseName.setText("Database Name");
    panel1.add(databaseName, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    UserName = new JTextField();
    UserName.setText("Username for DB");
    panel1.add(UserName, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    DBTypeComboBox = new JComboBox();
    final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
    defaultComboBoxModel1.addElement("MongoDB");
    defaultComboBoxModel1.addElement("MySQL");
    DBTypeComboBox.setModel(defaultComboBoxModel1);
    panel1.add(DBTypeComboBox, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    Password = new JPasswordField();
    Password.setText("Password");
    panel1.add(Password, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    collectionNameTextField = new JTextField();
    collectionNameTextField.setText("Collection Name");
    panel1.add(collectionNameTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$()
  {
    return primaryPanel;
  }

}
